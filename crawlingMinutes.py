{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 18:10:19) \n",
      "[GCC 7.2.0]\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import sys\n",
    "import platform\n",
    "import pandas as pd\n",
    "import re\n",
    "from datetime import datetime, timedelta\n",
    "\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import html2text\n",
    "from datetime import datetime\n",
    "\n",
    "def get_minutes_list(from_date='20050101'):\n",
    "    prefix_addr = \"https://www.bok.or.kr\"\n",
    "    from_date = datetime.strptime(from_date, '%Y%m%d')\n",
    "\n",
    "    for pageIndex in range(1, 31):\n",
    "        url = 'https://www.bok.or.kr/portal/bbs/B0000245/list.do?menuNo=200761&pageIndex={}'.format(pageIndex)\n",
    "        user_agent = 'Mozilla/5.0'\n",
    "        headers ={'User-Agent' : user_agent}\n",
    "        page = requests.get(url, headers=headers)\n",
    "\n",
    "        try:\n",
    "            soup = BeautifulSoup(page.content, 'html.parser')\n",
    "            brdList = soup.find_all('span', class_='col m10 s10 x9 ctBx')\n",
    "            datainfo = soup.find_all('div', class_='col s12 dataInfo')\n",
    "\n",
    "            for post, data in zip(brdList, datainfo):\n",
    "                guid = prefix_addr+post.a['href'][:-12]\n",
    "\n",
    "                desPage = requests.get(guid)\n",
    "                desSoup = BeautifulSoup(desPage.content, 'html.parser')   \n",
    "                description = desSoup.find('div', class_='dbData').get_text().strip()\n",
    "                if description.replace(' ','').find('통화정책방향') >= 0:\n",
    "                    title = post.find('span', class_='titlesub').get_text().strip()\n",
    "        \n",
    "                    mdate = title[title.find(')(') + 2:-1]            \n",
    "                    if mdate[-1] == '.':\n",
    "                        mdate = mdate[:-1]\n",
    "                    mdate = datetime.strptime(mdate, '%Y.%m.%d')\n",
    "\n",
    "                    if mdate < from_date:\n",
    "                        break\n",
    "\n",
    "                    rdate = data.find('span', class_='date').get_text().strip()\n",
    "                    rdate = datetime.strptime(rdate[3:], '%Y.%m.%d')    \n",
    "\n",
    "                    get_minutes_file(guid, mdate, rdate)\n",
    "        except:\n",
    "            print(\"get url.content error and pass page{} it\".format(pageIndex))\n",
    "\n",
    "def get_minutes_file(page_addr, mdate, rdate):\n",
    "    file_header = 'data/minutes/pdf/KO_'\n",
    "    prefix_addr = \"http://bok.or.kr\"\n",
    "\n",
    "    page = requests.get(page_addr)\n",
    "    soup = BeautifulSoup(page.content, 'html.parser')\n",
    "    \n",
    "    try:\n",
    "        links = soup.find('div', class_='addfile').find_all('a')\n",
    "\n",
    "        for link in links:\n",
    "            filename = link.get_text()\n",
    "            filename = filename.replace('\\r', '').replace('\\t', '').replace('\\n', '')\n",
    "\n",
    "            if filename[-3:] == 'pdf':\n",
    "                filename = mdate.strftime('%Y%m%d') + \"_\" + rdate.strftime('%Y%m%d')+ '.pdf'\n",
    "                file_addr = prefix_addr + link[\"href\"]\n",
    "                file_res = requests.get(file_addr)\n",
    "                filepath = file_header + filename\n",
    "\n",
    "                with open(filepath, 'wb') as f:\n",
    "                    f.write(file_res.content)\n",
    "\n",
    "                print('save file name : ')\n",
    "                print(filename)\n",
    "    except:\n",
    "        print(\"get file failed and pass it\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
